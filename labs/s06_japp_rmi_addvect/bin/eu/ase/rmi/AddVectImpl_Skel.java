// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package eu.ase.rmi;

public final class AddVectImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("int addVectors(int[], int[])[]")
    };
    
    private static final long interfaceHash = 3747695701237288078L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	eu.ase.rmi.AddVectImpl server = (eu.ase.rmi.AddVectImpl) obj;
	switch (opnum) {
	case 0: // addVectors(int[], int[])
	{
	    int[] $param_arrayOf_int_1;
	    int[] $param_arrayOf_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_arrayOf_int_1 = (int[]) in.readObject();
		$param_arrayOf_int_2 = (int[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int[] $result = server.addVectors($param_arrayOf_int_1, $param_arrayOf_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
