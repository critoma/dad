// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package eu.ase.rmi;

public final class AddVectImpl_Stub
    extends java.rmi.server.RemoteStub
    implements eu.ase.rmi.AddVectInterface, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("int addVectors(int[], int[])[]")
    };
    
    private static final long interfaceHash = 3747695701237288078L;
    
    // constructors
    public AddVectImpl_Stub() {
	super();
    }
    public AddVectImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addVectors(int[], int[])
    public int[] addVectors(int[] $param_arrayOf_int_1, int[] $param_arrayOf_int_2)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_arrayOf_int_1);
		out.writeObject($param_arrayOf_int_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    int[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (int[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
