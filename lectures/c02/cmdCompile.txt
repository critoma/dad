
Linux Ubuntu:
export JAVA_HOME=/opt/software/java/jdks/jdk1.8.0_161/
export PATH=$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
export CLASSPATH=.:$JAVA_HOME/jre/lib
export DAD=/home/stud/dad/lectures

cd $DAD/c02/src


A. Sockets - UDP - non-multi-threading

cd $DAD/c02/src/S09_Sockets

A.1. UDP Simple Client & Server

cd udpsimple01
javac eu/ase/net/udp/UDPServer.java
javac eu/ase/net/udp/UDPClient.java

sudo $JAVA_HOME/bin/java eu/ase/net/udp/UDPServer
>ps -a
>kill PID-UDP_Server
sudo $JAVA_HOME/bin/java eu/ase/net/udp/UDPServer &
>netstat -na -p udp
java eu/ase/net/udp/UDPClient 127.0.0.1
java eu/ase/net/udp/UDPClient 86.55.177.71

cd ..


A.2. UDP SNMP Client - Laboratory in detail:
cd udpsnmp02

javac eu/ase/net/snmp/TestSnmp.java
java eu/ase/net/snmp/TestSnmp

cd ..

>netstat -na -p udp | grep 161

Linux Ubuntu 12 | 14:
>sudo apt-get install snmpd
>sudo apt-get install snmp
>sudo apt-get install snmp-mibs-downloader

>sudo cp /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.original
>sudo gedit /etc/snmp/snmpd.conf
### edit the file with specific "sensitive" info:
#  Listen for connections on all interfaces (both IPv4 *and* IPv6)
# This is for VMs in IaaS Cloud
# agentAddress udp:161,udp6:[::1]:161
# This is for Docker containers in Native Cloud CaaS - it is not supported IPv6
agentAddress udp:161

#  Default access to basic system info...
rocommunity public  default    -V systemonly

# save the file and test the sysup-time
>sudo /etc/init.d/snmpd restart
>snmpget -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.3.0
iso.3.6.1.2.1.1.3.0 = Timeticks: (109696) 0:18:16.96
timetick <=> /100 => seconds / 60 sec => minutes


// ######################################################### Test in Cloud on 3 containers from Alpine Linux image:
# Cloud CaaS Docker with Alpine Linux on x86_64 - signi-in ONLY with Hub Docker critoma account:
# https://labs.play-with-docker.com/

apk update && apk upgrade
apk add openrc --no-cache
# server snmpd
apk add net-snmp
# client snmpget
apk add net-snmp-tools
apk add nano

rc-status
rc-status --list

ls -latr /usr/sbin/snmpd

# rc-service {service-name} start
# rc-service snmpd start

# /usr/sbin/snmpd start
# modify /etc/snmp/snmpd.conf to have agentAddress only udp:161 and add public and private community to answer "rocommunity private 127.0.0.1 .1"
# 
snmpd -Lo -f -C -c /etc/snmp/snmpd.conf &
netstat -na | grep 161


snmpget -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.3.0
snmpget -v 2c -c public <IP_of_Dcoker_Container> 1.3.6.1.2.1.1.3.0
snmpget -v 2c -c public 192.168.0.13 1.3.6.1.2.1.1.3.0
# OS Version:
snmpget -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.1.0
# Sys Uptime:
snmpget -v 2c -c public 127.0.0.1 1.3.6.1.2.1.1.3.0
# Linux CPU 1 minute Load: 
snmpget -v 2c -c private 127.0.0.1 1.3.6.1.4.1.2021.10.1.3.1
# Linux CPU 5 minute Load:  
snmpget -v 2c -c private 127.0.0.1 1.3.6.1.4.1.2021.10.1.3.2
# Linux Total RAM in machine: .1.3.6.1.4.1.2021.4.5.0 | Total RAM used: .1.3.6.1.4.1.2021.4.6.0 | Total RAM Free: .1.3.6.1.4.1.2021.4.11.0
snmpget -v 2c -c private 127.0.0.1 1.3.6.1.4.1.2021.4.5.0 1.3.6.1.4.1.2021.4.6.0 1.3.6.1.4.1.2021.4.11.0
# Linux Path where the disk is mounted: .1.3.6.1.4.1.2021.9.1.2.1 | Path of the device for the partition: .1.3.6.1.4.1.2021.9.1.3.1 | 
# Linux Total size of the disk/partion (kBytes): .1.3.6.1.4.1.2021.9.1.6.1
snmpget -v 2c -c private 127.0.0.1 1.3.6.1.4.1.2021.9.1.2.1 1.3.6.1.4.1.2021.9.1.3.1 1.3.6.1.4.1.2021.9.1.6.1
# Linux network interface
snmpwalk -v 2c -c private 127.0.0.1 .1.3.6.1.2.1.2.2.1.2

apk add tcpdump
tcpdump -i lo -s 65535 -w snmp_test.pcap udp port 161 &
# kill tcpdump

# start a very fast light weight HTTP server on port 80 and download the pcap file outside by opening PORT 80 into public interface:
mkdir -p /var/www/localhost/htdocs /var/log/lighttpd /var/lib/lighttpd
# chown -R lighttpd:lighttpd /var/www/localhost/ /var/log/lighttpd /var/lib/lighttpd
apk add lighttpd
rc-update add lighttpd default
# rc-service lighttpd restart
touch /run/openrc/softlevel
ls /etc/lighttpd/lighttpd.conf
chmod 777 /var/log/lighttpd/
/usr/sbin/lighttpd -f /etc/lighttpd/lighttpd.conf
# /usr/sbin/lighttpd &
echo "it works" > /var/www/localhost/htdocs/index.html
cp snmp_test.pcap /var/www/localhost/htdocs/
# http://ip172-18-0-105-ckds454snmng00do6fjg-80.direct.labs.play-with-docker.com/index.html
# http://ip172-18-0-105-ckds454snmng00do6fjg-80.direct.labs.play-with-docker.com/snmp_test.pcap


apk add openjdk17-jdk
ls -latr /usr/lib/jvm/default-jvm/bin

mkdir -p /root/testsnmp02/eu/ase/net/snmp
mkdir -p /root/testsnmp02/eu/ase/net/snmp4j
cd /root/testsnmp02/eu/ase/net/snmp
wget https://raw.githubusercontent.com/critoma/dad/master/labs/s02_japp_snmp/src/eu/ase/net/snmp/ProgMainTestSnmp.java
cd /root/testsnmp02/eu/ase/net/snmp4j
wget https://raw.githubusercontent.com/critoma/dad/master/labs/s02_japp_snmp/src/eu/ase/net/snmp4j/ProgMainSnmpClient.java
mkdir -p /root/testsnmp02/lib
cd /root/testsnmp02/lib
wget https://github.com/critoma/dad/raw/master/labs/s02_japp_snmp/lib/snmp4j-2.3.3.jar

cd /root/testsnmp02/
javac -cp .:./lib/* eu/ase/net/snmp4j/ProgMainSnmpClient.java 
java -cp .:./lib/* eu.ase.net.snmp4j.ProgMainSnmpClient 127.0.0.1
java -cp .:./lib/* eu.ase.net.snmp4j.ProgMainSnmpClient 192.168.0.18

ps | grep snmpd
kill -9 <SNMPD_PID>



// ##############################################################################

# B.Student sample in Java with OOP - simple and jLibs - JARs in command line:

cd $DAD/c02/src/S02_OOP_ANT_Maven_Gradle

# B.1 - Simple
javac eu/ase/ooparrays/Student.java
javac eu/ase/ooparrays/ProgMainOopArrays.java

java eu/ase/ooparrays/ProgMainOopArrays

# B.2 - full JAR deployment 
jar -cmvf ./META-INF/MANIFEST.MF ../student.jar eu/ase/ooparrays/*.class
rm eu/ase/ooparrays/*.class

java -jar ../student.jar eu/ase/ooparrays/ProgMainOopArrays
rm ../student.jar

# B.3 - the Java lib - JAR:
javac eu/ase/ooparrays/Student.java
jar -cvf ../studentLib.jar eu/ase/ooparrays/Student.class


javac eu/ase/ooparrays/ProgMainOopArrays.java
rm eu/ase/ooparrays/Student.class
java -classpath .:../studentLib.jar eu/ase/ooparrays/ProgMainOopArrays

rm eu/ase/ooparrays/ProgMainOopArrays.class
rm ../studentLib.jar

// ##############################################################################

# C. Apache ANT
# https://ant.apache.org/manual/tutorial-HelloWorldWithAnt.html

export ANT_HOME=/opt/software/apache-ant-1.10.1
export PATH=$PATH:$ANT_HOME/bin

ant -version



# build.xml
<project>

    <target name="clean">
        <delete dir="build"/>
    </target>

    <target name="compile">
        <mkdir dir="build/classes"/>
        <javac srcdir="src" destdir="build/classes"/>
    </target>

    <target name="jar">
        <mkdir dir="build/jar"/>
        <jar destfile="build/jar/student.jar" basedir="build/classes">
            <manifest>
                <attribute name="Main-Class" value="eu.ase.ooparrays.ProgMainOopArrays"/>
            </manifest>
        </jar>
    </target>

    <target name="run">
        <java jar="build/jar/student.jar" fork="true"/>
    </target>

</project>


cd $DAD/c02/src/S02_OOP_ANT_Maven_Gradle/antproj/

ant compile
ant jar
ant run

ant clean


// ##############################################################################

# D. Apache Maven - MVN

# https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
# https://maven.apache.org/guides/getting-started/index.html
# https://www.tutorialspoint.com/maven/maven_build_test_project.htm

export MVN_HOME=/opt/software/apache-maven-3.5.2
export M2_HOME=/opt/software/apache-maven-3.5.2
export PATH=$PATH:$MVN_HOME/bin

cd $DAD/c02/src/S02_OOP_ANT_Maven_Gradle/mavenproj
mvn --version

# mvn archetype:generate -DgroupId=eu.ase.ooparrays -DartifactId=my-app-student -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

ls -latr /home/stud/.m2/repository
du -k -h ls /home/stud/.m2/repository

# output approx. 18MB

cd my-app-student
mvn clean 
mvn compile
mvn package

ls -latr /home/stud/.m2/repository
du -k -h ls /home/stud/.m2/repository

ls -latr /root/.m2/repository
du -k -h ls /root/.m2/repository

# output approx. 27/68 MB

java -classpath target/my-app-student-1.0-SNAPSHOT.jar eu.ase.ooparrays.App

// ##############################################################################

# E. Gradle
# https://gradle.org/install/
# https://gradle.org/install/
# https://github.com/jabedhasan21/java-hello-world-with-gradle
# https://www.tutorialspoint.com/gradle/index.htm
# https://www.tutorialspoint.com/gradle/gradle_build_a_java_project.htm

# https://github.com/jabedhasan21/java-hello-world-with-gradle/blob/master/README.md

export GRADLE_HOME=/opt/software/gradle-4.5
export PATH=$PATH:$GRADLE_HOME/bin

cd $DAD/c02/src/S02_OOP_ANT_Maven_Gradle/gradleproj
gradle -v

gradle -tasks
gradle -help

# mkdir -p my-app-student/src/main/java/eu/ase/ooparrays
cd my-app-student


# gradle init

# in build.gradle file:
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'eu.ase.ooparrays.ProgMainOopArrays'

// tag::jar[]
jar {
    baseName = 'student-gradle'
    version =  '0.1.0'
}
// end::jar[]

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8




gradle build

gradle run

java -classpath build/libs/student-gradle-0.1.0.jar eu.ase.ooparrays.ProgMainOopArrays

gradle clean

## git reset --hard head
#  git reset --hard master 
// ##############################################################################

# F. Jenkins - DevOps

export JAVA_HOME=/opt/software/java/jdks/jdk1.8.0_161
export CLASSPATH=.:$JAVA_HOME/jre/lib
export CATALINA_HOME=/opt/software/apache-tomcat-9.0.4
export PATH=.:$JAVA_HOME/bin:$CATALINA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

cd $CATALINA_HOME
bin/startup.sh

http://127.0.0.1:8080
http://127.0.0.1:8080/jenkins/


bin/shutdown.sh

// ##############################################################################
############
# G. Docker
############

# 1. (Optional) Turn Windows features on or off - FULL Hyper-V & Windows Hypervisor Platform

# 2. Command line:
wsl.exe --set-version Ubuntu 2
wsl --set-default-version 2
# Make sure that it is listing Ubuntu version 2 and it is RUNNING:
wsl -l -v

# 3. (Optional) Reinstall Docker Engine:
# Apps & Features - Uninstall Docker, then install again.
# https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe
# - in Downloads - double click and Next (Use WSL2 instead of Hyper-V) => Docker 4.24.0 installed

# 4. In settings of Docker GUI
# Resources -> WSL Integration - check enable integration and turn (updated) Ubuntu ON => Apply & Restart

# (Optional) RESTART MACHINE!!!
docker run -dit <ism docker image id>
docker start -i <ism container id>
docker stop <ism container id>

https://hub.docker.com 

https://hub.docker.com/r/critoma/ubuntu-java-node-py-dev/ 


docker search critoma
# https://hub.docker.com/r/critoma/linux-ubuntu-dev-security-ism
docker pull critoma/linux-ubuntu-dev-security-ism
docker run -it critoma/linux-ubuntu-dev-security-ism
# docker run --name node007 -p 8022:22 -p 8000:80 -p -8080:8080 -p 8030:3000 -p 8443:443 -p 8050-8070:8050-8070 -it critoma/linux-ubuntu-dev-security-ism

$ docker container ls -a
$ docker start <container_id>
$ docker exec -it <container_id> /bin/bash
$ docker exec -u stud -t -i 0aa85c74361c /bin/bash
$ docker stop <container_id>

# deprecated:
# docker pull critoma/ubuntu-java-node-py-dev
# docker run -it critoma/ubuntu-java-node-py-dev

# alternatively
docker pull ubuntu





// ##############################################################################

# ***. Create YOUR own Docker container - NOT necessary and totally optional
https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-from-a-package

https://download.docker.com/linux/ubuntu/dists/xenial/pool/stable/amd64/

sudo dpkg -i /path/to/package.deb

sudo docker run hello-world



############
>terminal
cd /home/stud/kits/docker

sudo dpkg -i docker-ce_17.03.2~ce-0~ubuntu-xenial_amd64.deb

sudo docker run hello-world

docker --version

docker images

docker container ls

docker exec -it <container_id> bash



// ##############################################################################



H. Reflection

cd $DAD/c02/src/S03_Annotation_Reflection

javac eu/ase/reflection/*.java

java eu/ase/reflection/ProgMainTString

1. Getting method declaration
java eu/ase/reflection/DumpMethods1 eu.ase.reflection.ProgMainTString
java eu/ase/reflection/DumpMethods1 eu.ase.reflection.TString

2. Finding Out More About Methods of a Class
java eu/ase/reflection/Methods3 eu.ase.reflection.TString

3. Creating new Objects, Invoking Methods by Name. and Changing Values of Fields
java eu/ase/reflection/RComplete6 eu.ase.reflection.TString




// ##############################################################################

I. Annotations (+ Reflection)

cd $DAD/c02/src/S03_Annotation_Reflection

//Combine annotation with reflection
javac eu/ase/annotations/Test.java
javac eu/ase/annotations/MyTestClass.java

javac eu/ase/annotations/RunTests.java


java eu/ase/annotations/RunTests eu.ase.annotations.MyTestClass



// ##################################################################################

J. J-Unit 4 Minimal Annotation Intro / Full JUnit 4 and 5 @ SQE/QA Lectures (Sample for Java Libraries):
// https://www.tutorialspoint.com/junit/index.htm

cd $DAD/c02/src/S03_Annotation_Reflection/junit

javac -classpath .:./lib/junit-4.12.jar eu/ase/junit/*.java

java -classpath .:./lib/junit-4.12.jar:./lib/hamcrest-core-1.3.jar eu/ase/junit/MessageUtilTestJUnitRunner




// ##############################################################################


K. I/O + JNI

cd $DAD/c02/src/S04_LibAndIO


K2. I/O Data Streams

cd $DAD/c02/src/S04_LibAndIO/DataStreams2

javac ProgMain.java
java ProgMain


K3. Serialization

cd $DAD/c02/src/S04_LibAndIO/ObjectStream_Serialization3

K3.1a. Compile and run serialization 1

javac Serializare1.java
java SalvareObiect
-se sterg clasele rezultat, mai putin test1.txt

K3.1b. Compile and run deserialization 1

javac Deserializare1.java
java RefacereObiect
-se sterg clasele rezultat, mai putin test1.txt

K4. RandomAccessFile + File

cd $DAD/c02/src/S04_LibAndIO/FileRandomAccessFile4

javac TestRAF.java
java TestRAF test1.txt

javac ListFiles.java
java ListFiles .


K5. JNI

cd $DAD/c02/src/S05_JNI

K5.1. Compilare

javac JNISample.java
//javac eu/ase/jni/JNISample.java

K5.2. Generare Header File

javah -jni ReadFile
//javah -classpath .:./eu/ase/jni -d eu/ase/jni eu.ase.jni.ReadFile
//javah -jni eu.ase.jni.ReadFile

K5.3. Implement native method in dad_nativelib.c

gedit dad_nativelib.c
//dad_nativelib.c
//#include "./eu/ase/jni/eu_ase_jni_ReadFile.h"
#include "./ReadFile.h"
#include <malloc.h>
#include <stdio.h>

JNIEXPORT jbyteArray JNICALL Java_ReadFile_loadFileInMemory (JNIEnv* env, jobject jobj, jstring name)
{
	jbyteArray jb;
	unsigned char *buf;
	int len = 0;
	jboolean iscopy;
    	const char *mfile = (*env)->GetStringUTFChars(env, name, &iscopy);
    	FILE* f = fopen(mfile, "r");

	fseek(f, 0, 2); // SEEK_END = 2 
	len = ftell(f); buf = (unsigned char*)malloc(len*sizeof(char));
	fseek(f, 0, 0); // SEEK_SET = 0
	
	jb=(*env)->NewByteArray(env, len);
	
	fread(buf, sizeof(char), len, f);
	
	printf( "Contents of buffer = %s\n len=%d\n", buf, len );

	(*env)->SetByteArrayRegion(env, jb, 0, len, (jbyte *)buf);	
  
	fclose(f);
	free(buf);
    	(*env)->ReleaseStringUTFChars(env, name, mfile);

	return (jb);

}

K5.4. In same or another terminal, Compile the C program (dad_nativelib.c) into *.so shared object/library (from command prompt with gcc)

cd $DAD/c02/src/S05_JNI

export LD_LIBRARY_PATH=.:/opt/software/java/jdks/jdk1.8.0_161/jre/lib

gcc -Wall -fPIC -c -I$JAVA_HOME/include -I$JAVA_HOME/include/linux dad_nativelib.c
gcc -shared -Wl,-soname,libdad_native.so.1 -o libdad_native.so.1.0 dad_nativelib.o
ln -sf ./libdad_native.so.1.0 ./libdad_native.so.1
ln -sf ./libdad_native.so.1 ./libdad_native.so


K5.5. Run the Java program using the *.so - shared object/library lib

//java -Djava.library.path=$LD_LIBRARY_PATH eu/ase/jni/JNIProgMain tt1.txt

//java -Djava.library.path=. JNIProgMain tt1.txt

java JNIProgMain tt1.txt




-------------------------------------------------------------------------------------------------------------

JNI in MS Windows:

-. setare variabile mediu

set JAVA_HOME=C:\Software\Java\JDKs\<jdk8>
set PATH=%JAVA_HOME%\bin
set CLASSPATH=.;%JAVA_HOME%\jre\lib;

d:
cd D:\Temp\DAD\Lecture\c05\src\S05_JNI

K5.1. Compilare

javac JNISample.java

K5.2. Generare Header File

javah -jni ReadFile

K5.3. Implement native method in nativelib1.c

#include "./ReadFile.h"
#include <malloc.h>
#include <stdio.h>

JNIEXPORT jbyteArray JNICALL Java_ReadFile_loadFileInMemory (JNIEnv* env, jobject jobj, jstring name)
{
	jbyteArray jb;
	unsigned char *buf;
	int len = 0;
	jboolean iscopy;
    	const char *mfile = (*env)->GetStringUTFChars(env, name, &iscopy);
    	FILE* f = fopen(mfile, "r");

	fseek(f, 0, 2); // SEEK_END = 2 
	len = ftell(f); buf = (unsigned char*)malloc(len*sizeof(char));
	fseek(f, 0, 0); // SEEK_SET = 0
	
	jb=(*env)->NewByteArray(env, len);
	
	fread(buf, sizeof(char), len, f);
	
	printf( "Contents of buffer = %s\n len=%d\n", buf, len );

	(*env)->SetByteArrayRegion(env, jb, 0, len, (jbyte *)buf);	
  
	fclose(f);
	free(buf);
    	(*env)->ReleaseStringUTFChars(env, name, mfile);

	return (jb);

}

K5.4. Compile the C program (nativelib1.c) into dll lib (from Visual Studio tools window)

d:
cd D:\Temp\DAD\Lecture\c05\src\S05_JNI

cl.exe -IC:/Software/Java/JDKs/<jdk8>/include -IC:/Software/Java/JDKs/<jdk8>/include/win32 /LD nativelib1.c /Fenativelib1.dll

K5.5 Run the Java program using the dll lib

java JNIProgMain tt1.txt





// ##############################################################################


