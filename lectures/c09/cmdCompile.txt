# Linux UBUNTU 16/18/20 or Docker:
https://hub.docker.com/r/critoma/linux-ubuntu-dev-security-ism
docker pull critoma/linux-ubuntu-dev-security-ism

# node.js INTRO and RECAP
# //set env variables:
# be sure node is not already set
# export NODEJS_HOME=/opt/software/node-v8.9.4-linux-x64
# export PATH=$NODEJS_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

export DAD=/home/stud/dad/lectures

cd $DAD/c09

A. node.js 8+ / ECMAScript 6+ Intro and recap

# s09_node_webserver
## Usage in Eclipse from the Marketplace
## Developing
### Tools
# Created with [Nodeclipse](https://github.com/Nodeclipse/nodeclipse-1)
# ([Eclipse Marketplace](http://marketplace.eclipse.org/content/nodeclipse), [site](http://www.nodeclipse.org))   
# Nodeclipse is free open-source project that grows with your contributions.

cd nodejs

node hello.js

node variables.js

node controlStatements.js

node strings.js


node functions.js

node filesAsync.js

node events.js

node buffers.js

node streams.js

node streamFileEncryptCompress.js

node streamFileDecompressDecrypt.js

node files.js


node osproc.js --port 89


node serverudp.js

node clientudp.js

node servertcp.js

node clienttcp.js


node serverhttp.js
http://localhost:8888/index.html
http://localhost:8888/test.html

node clientHttpGet.js

node clientHttpPost.js

node oopObject.js

node oopClasses.js

node collectArraysMapErr.js

node promise.js
node promiseasync.js

# Typescript sample:
# npm install -g typescript
# tsc hello.ts && node hello.js

# npm install websocket
node websocket.js
# in Chromium - file:///home/.../websocketHTML5.html



B. REST Services | node.js with Express

# Play with MongoDB first:
# npm install mongodb
node testNodeWithMongoDB.js

# Build a REST API using Node.js, Express and MongoDB
mkdir tripcost
cd tripcost
npm init -y
ls -latr
ls -latr node_modules/
cat package.json
npm install mongodb
npm install express
cat package.json
ls -latr node_modules/

touch serverRESTMongoDB.js
node serverRESTMongoDB.js


# npm install express
node restServer.js

# in Chromium, PostMAN plug-in do:
# GET: http://127.0.0.1:8081/listUsers
# POST: http://127.0.0.1:8081/addUser
# GET: http://127.0.0.1:8081/2
# DELETE: http://127.0.0.1:8081/deleteUser

####################################################

# AWS FaaS Lmbda sample in Node.js or Java:
# https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html
# https://console.aws.amazon.com/lambda/home
# use an Aws account - e.g. secitc@gmail.com and password
# https://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/functions
# -> Create Function ; choose name and platform Node.js or Java ; Test it
# -> Add a trigger -> API Gateway => create an API: Http or Rest => with security open or jwt
# -> identify the URL of the trigger, by selecting trigger and copy the API Endpoint:
# https://....amazonaws.com/default/myFunction2

# https://us-east-2.console.aws.amazon.com/apigateway/main/apis?region=us-east-2&stage=default
# see the stages of the associated Gateway API under Deploy left menu


# https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html


