# Linux UBUNTU 16/18/20 or Docker:
https://hub.docker.com/r/critoma/linux-ubuntu-dev-security-ism
docker pull critoma/linux-ubuntu-dev-security-ism
docker run -d -p 3000:3000 --name node4 -it critoma/linux-ubuntu-dev-security-ism
docker container ps
docker container ps -a
docker exec -u stud -it node4 /bin/bash
# docker exec -u stud -it 55c8801b9ad0 /bin/bash
sudo systemctl start mongod
## mkdir -p /data/db
## sudo mongod --port 27018 &


# stud@240ed5ab361e:~/dad/c09js/tripcost$ export NODE_HOME=/opt/software/node-v16.14.2-linux-x64 
# stud@240ed5ab361e:~/dad/c09js/tripcost$ export PATH=.:$NODE_HOME/bin:$PATH


# node.js INTRO and RECAP
# //set env variables:
# be sure node is not already set
# export NODEJS_HOME=/opt/software/node-v8.9.4-linux-x64
# export PATH=$NODEJS_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

export DAD=/home/stud/dad/lectures

cd $DAD/c09

A. node.js 8+ / ECMAScript 6+ Intro and recap

# s09_node_webserver
## Usage in Eclipse from the Marketplace
## Developing
### Tools
# Created with [Nodeclipse](https://github.com/Nodeclipse/nodeclipse-1)
# ([Eclipse Marketplace](http://marketplace.eclipse.org/content/nodeclipse), [site](http://www.nodeclipse.org))   
# Nodeclipse is free open-source project that grows with your contributions.

cd nodejs

node hello.js

node variables.js

node controlStatements.js

node strings.js


node functions.js

node filesAsync.js

node events.js

node buffers.js

node streams.js

node streamFileEncryptCompress.js

node streamFileDecompressDecrypt.js

node files.js


node osproc.js --port 89


node serverudp.js

node clientudp.js

node servertcp.js

node clienttcp.js


node serverhttp.js
http://localhost:8888/index.html
http://localhost:8888/test.html

node clientHttpGet.js

node clientHttpPost.js

node oopObject.js

node oopClasses.js

node collectArraysMapErr.js

node promise.js
node promiseasync.js

# Typescript sample:
# npm install -g typescript
# tsc hello.ts && node hello.js

# npm install websocket
node websocket.js
# in Chromium - file:///home/.../websocketHTML5.html


############################################################################################
B. REST Services | node.js with Express

######################################################
# B.1 node.js + Express for REST API with Files instead Database
# npm install express
node restServer.js

# in Chromium, PostMAN plug-in do:
# GET: http://127.0.0.1:8081/listUsers
# POST: http://127.0.0.1:8081/addUser
# GET: http://127.0.0.1:8081/2
# DELETE: http://127.0.0.1:8081/deleteUser



#######################################################
# B.2 Play with MongoDB first:

# npm install mongodb
node testNodeWithMongoDB.js

### --------------------------------------------------



## in case of issues with MongoDb - reinstall DB and client module 5.0.7 or 5.1.0 upgrade 2 -> 6.0
sudo apt-get purge mongodb-org*
sudo rm -r /var/log/mongodb /var/lib/mongodb
# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/
# already installed: sudo apt-get install gnupg
wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
sudo apt-get update
sudo apt-get install -y mongodb-org
# sudo apt-get install -y mongodb-org=6.0.4 mongodb-org-database=6.0.4 mongodb-org-server=6.0.4 mongodb-org-mongos=6.0.4 mongodb-org-tools=6.0.4
sudo mongod --port 27017 &
# UPDATE node.js code for new drivers:
const { MongoClient } = require('mongodb');
// or as an es module:
// import { MongoClient } from 'mongodb'

// Connection URL
const url = 'mongodb://localhost:27017';
const client = new MongoClient(url);

// Database Name
const dbName = 'myProject';

async function main() {
  // Use connect method to connect to the server
  await client.connect();
  console.log('Connected successfully to server');
  const db = client.db(dbName);
  const collection = db.collection('documents');

  // the following code examples can be pasted here...

  return 'done.';
}

main()
  .then(console.log)
  .catch(console.error)
  .finally(() => client.close());


##########################################################
# B.3 Complete Build a REST API using Node.js, Express and MongoDB
mkdir tripcost
cd tripcost
npm init -y
ls -latr
ls -latr node_modules/
cat package.json
npm install mongodb
npm install express
cat package.json
ls -latr node_modules/

touch serverRESTMongoDB.js
node serverRESTMongoDB.js

/*
# // Devoxx May 2019 London UK: https://www.youtube.com/playlist?list=PLRsbF2sD7JVqkOs-GFGxBmNf0KECELaiU
# // DNA for Storage: https://www.youtube.com/watch?v=NsfuBSsF1Fk&list=PLRsbF2sD7JVqkOs-GFGxBmNf0KECELaiU&index=3
# // Quantum: https://www.youtube.com/watch?v=RMeWqXdBHIg&list=PLRsbF2sD7JVqkOs-GFGxBmNf0KECELaiU&index=82

# // # Test REST API with cURL, Postman, etc as plugin in Chrome Browser or command line (CLI) or stand-alone app:
GET /trips
# in browser http://127.0.0.1:3000/trips because docker has been started with port forwarding
POST /trip {"name": "London, UK, May 2019"}
GET /trips

# POST /expense { trip - id from the prev GET /trips, date, amount, category, description }
POST /expense {"trip": "62822a80236ab9479e834eb6", "date": "2019-05-16", "amount":25, "category":"food", "description":"Breakfast" }
POST /expense {"trip":"62822a80236ab9479e834eb6", "date": "2019-05-16", "amount":50, "category":"conference", "description":"Access 2 Devoxx Conf" }

GET /expenses
*/



####################################################

# AWS FaaS Lmbda sample in Node.js or Java:
# https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html
# https://console.aws.amazon.com/lambda/home
# use an Aws account - e.g. secitc@gmail.com and password
# https://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/functions
# -> Create Function ; choose name and platform Node.js or Java ; Test it
# -> Add a trigger -> API Gateway => create an API: Http or Rest => with security open or jwt
# -> identify the URL of the trigger, by selecting trigger and copy the API Endpoint:
# https://....amazonaws.com/default/myFunction2

# https://us-east-2.console.aws.amazon.com/apigateway/main/apis?region=us-east-2&stage=default
# see the stages of the associated Gateway API under Deploy left menu


# https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html


